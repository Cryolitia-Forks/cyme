on: [push, pull_request]

name: build

env:
  PROJECT_NAME: cyme

jobs:
  build:
    name: Build and test for ${{ matrix.job.os }} (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # - { os: ubuntu-latest, target: arm-unknown-linux-gnueabihf , use-cross: true }
          # - { os: ubuntu-latest, target: arm-unknown-linux-musleabihf, use-cross: true }
          # - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu   , use-cross: true }
          # - { os: ubuntu-latest, target: i686-unknown-linux-gnu      , use-cross: true }
          # - { os: ubuntu-latest, target: i686-unknown-linux-musl     , use-cross: true }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: true }
          # - { os: ubuntu-20.04, target: x86_64-unknown-linux-musl   , use-cross: true }
          - { os: macos-latest, target: x86_64-apple-darwin         }
          # - { os: windows-2019, target: i686-pc-windows-msvc        }
          # - { os: windows-2019, target: x86_64-pc-windows-gnu       }
          # - { os: windows-2019, target: x86_64-pc-windows-msvc      }
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          # TODO replace with target toolchain and use cross if required
          toolchain: stable

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            *-linux-*) sudo apt-get -y update ; sudo apt-get -y install libudev-dev ;;
          esac

      - name: Test
        run: cargo test

      - name: Build release
        run: cargo build --release --all-features

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> "$GITHUB_ENV"
          echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> "$GITHUB_ENV"
          echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

      - name: archive executable
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.job.os }}-${{ matrix.job.target}}
          path: target/release/${{ env.PROJECT_NAME }}

      - name: Check for release
        id: is-release
        shell: bash
        run: |
          unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/[0-9].* ]]; then IS_RELEASE='true' ; fi
          echo "IS_RELEASE=${IS_RELEASE}" >> "$GITHUB_OUTPUT"

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        if: steps.is-release.outputs.IS_RELEASE
        with:
          files: target/release/${{ env.PROJECT_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
